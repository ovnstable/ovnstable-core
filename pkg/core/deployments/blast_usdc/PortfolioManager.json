{
  "address": "0x30E50923479D8bE4b468c0254329931bb1BE8323",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "AssetUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Balance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "CashStrategyAlreadySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "CashStrategyRestaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "CashStrategyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Exchanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "ExchangerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "Mark2MarketUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "roleManager",
          "type": "address"
        }
      ],
      "name": "RoleManagerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minWeight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "targetWeight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxWeight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "riskFactor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabledReward",
          "type": "bool"
        }
      ],
      "name": "StrategyWeightUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TotalRiskFactorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXCHANGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PORTFOLIO_AGENT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOTAL_WEIGHT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "addStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cashStrategy",
      "outputs": [
        {
          "internalType": "contract IStrategy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimAndBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchanger",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllStrategyWeights",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minWeight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "targetWeight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxWeight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "riskFactor",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "enabled",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enabledReward",
              "type": "bool"
            }
          ],
          "internalType": "struct IPortfolioManager.StrategyWeight[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllStrategyWeightsWithNames",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "strategy",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "minWeight",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "targetWeight",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxWeight",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "riskFactor",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "enabled",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "enabledReward",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPortfolioManager.StrategyWeight",
              "name": "weight",
              "type": "tuple"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "internalType": "struct IPortfolioManager.StrategyWeightWithName[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "getStrategyWeight",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minWeight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "targetWeight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxWeight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "riskFactor",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "enabled",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enabledReward",
              "type": "bool"
            }
          ],
          "internalType": "struct IPortfolioManager.StrategyWeight",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalRiskFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "m2m",
      "outputs": [
        {
          "internalType": "contract IMark2Market",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "navSlippageBp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "removeStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roleManager",
      "outputs": [
        {
          "internalType": "contract IRoleManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "setAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_cashStrategy",
          "type": "address"
        }
      ],
      "name": "setCashStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchanger",
          "type": "address"
        }
      ],
      "name": "setExchanger",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_cashStrategy",
          "type": "address"
        }
      ],
      "name": "setForceCashStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_m2m",
          "type": "address"
        }
      ],
      "name": "setMark2Market",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_navSlippageBp",
          "type": "uint256"
        }
      ],
      "name": "setNavSlippageBp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_roleManager",
          "type": "address"
        }
      ],
      "name": "setRoleManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minWeight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "targetWeight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxWeight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "riskFactor",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "enabled",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enabledReward",
              "type": "bool"
            }
          ],
          "internalType": "struct IPortfolioManager.StrategyWeight[]",
          "name": "_strategyWeights",
          "type": "tuple[]"
        }
      ],
      "name": "setStrategyWeights",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "strategyWeightPositions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "strategyWeights",
      "outputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "riskFactor",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "enabledReward",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRiskFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "numDeployments": 2,
  "solcInputHash": "1ab8ad50058b089a0a488ca2ddd0d6bd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"AssetUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Balance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"CashStrategyAlreadySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CashStrategyRestaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"CashStrategyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Exchanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"ExchangerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"Mark2MarketUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"roleManager\",\"type\":\"address\"}],\"name\":\"RoleManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"riskFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabledReward\",\"type\":\"bool\"}],\"name\":\"StrategyWeightUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TotalRiskFactorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXCHANGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PORTFOLIO_AGENT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_WEIGHT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"addStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cashStrategy\",\"outputs\":[{\"internalType\":\"contract IStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAndBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchanger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllStrategyWeights\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"riskFactor\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enabledReward\",\"type\":\"bool\"}],\"internalType\":\"struct IPortfolioManager.StrategyWeight[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllStrategyWeightsWithNames\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"riskFactor\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enabledReward\",\"type\":\"bool\"}],\"internalType\":\"struct IPortfolioManager.StrategyWeight\",\"name\":\"weight\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct IPortfolioManager.StrategyWeightWithName[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"getStrategyWeight\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"riskFactor\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enabledReward\",\"type\":\"bool\"}],\"internalType\":\"struct IPortfolioManager.StrategyWeight\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalRiskFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"m2m\",\"outputs\":[{\"internalType\":\"contract IMark2Market\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"navSlippageBp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"removeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roleManager\",\"outputs\":[{\"internalType\":\"contract IRoleManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"setAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cashStrategy\",\"type\":\"address\"}],\"name\":\"setCashStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchanger\",\"type\":\"address\"}],\"name\":\"setExchanger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cashStrategy\",\"type\":\"address\"}],\"name\":\"setForceCashStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_m2m\",\"type\":\"address\"}],\"name\":\"setMark2Market\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_navSlippageBp\",\"type\":\"uint256\"}],\"name\":\"setNavSlippageBp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_roleManager\",\"type\":\"address\"}],\"name\":\"setRoleManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"riskFactor\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enabledReward\",\"type\":\"bool\"}],\"internalType\":\"struct IPortfolioManager.StrategyWeight[]\",\"name\":\"_strategyWeights\",\"type\":\"tuple[]\"}],\"name\":\"setStrategyWeights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategyWeightPositions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"strategyWeights\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"riskFactor\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enabledReward\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRiskFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"withdraw(uint256)\":{\"details\":\"Withdraw target amount assets from strategies Send amount to Exchanger\",\"returns\":{\"_0\":\"- how much PortfolioManager unstake from strategies\",\"_1\":\"- executed or not balance function on PortfolioManager\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PortfolioManager.sol\":\"PortfolioManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc8710577334e8d0799ae2b2a731b1924a7bddd64319da9787ddd2dc69bdd1ce5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7795808e3899c805254e3ae58074b20f799b466e3f43e057e47bedee5fb771f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xefb41f5c1a00249b7a99f0782f8c557865605426a3fb6e5fe9ae334293ae4f33\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xd90d7723512df65ae417adaf0801042940f0dabd60039ceeaffe34aa5b238da1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@overnight-contracts/common/contracts/libraries/OvnMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary OvnMath {\\n\\n    uint256 constant BASIS_DENOMINATOR = 10 ** 4;\\n\\n    function abs(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x > y) ? (x - y) : (y - x);\\n    }\\n\\n    function addBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * (BASIS_DENOMINATOR + basisPoints) / BASIS_DENOMINATOR;\\n    }\\n\\n    function reverseAddBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR + basisPoints);\\n    }\\n\\n    function subBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * (BASIS_DENOMINATOR - basisPoints) / BASIS_DENOMINATOR;\\n    }\\n\\n    function reverseSubBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR - basisPoints);\\n    }\\n}\\n\",\"keccak256\":\"0xb72198ec96f2754e9bf20531b1b8744f06ff2cc1c720e0ecc07196087cbe9657\",\"license\":\"MIT\"},\"contracts/PortfolioManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\nimport \\\"@overnight-contracts/common/contracts/libraries/OvnMath.sol\\\";\\n\\nimport \\\"./interfaces/IPortfolioManager.sol\\\";\\nimport \\\"./interfaces/IMark2Market.sol\\\";\\nimport \\\"./interfaces/IStrategy.sol\\\";\\nimport \\\"./interfaces/IRoleManager.sol\\\";\\n\\ncontract PortfolioManager is IPortfolioManager, Initializable, AccessControlUpgradeable, UUPSUpgradeable {\\n    bytes32 public constant EXCHANGER = keccak256(\\\"EXCHANGER\\\");\\n    bytes32 public constant PORTFOLIO_AGENT_ROLE = keccak256(\\\"PORTFOLIO_AGENT_ROLE\\\");\\n    uint256 public constant TOTAL_WEIGHT = 100000; // 100000 ~ 100%\\n\\n    // ---  fields\\n\\n    address public exchanger;\\n    IERC20 asset;\\n    mapping(address => uint256) public strategyWeightPositions;\\n    StrategyWeight[] public strategyWeights;\\n    IStrategy public cashStrategy;\\n    IMark2Market public m2m;\\n    uint256 public totalRiskFactor;\\n    uint256 public navSlippageBp;\\n    IRoleManager public roleManager;\\n\\n    // ---  events\\n\\n    event ExchangerUpdated(address value);\\n    event Mark2MarketUpdated(address value);\\n    event RoleManagerUpdated(address roleManager);\\n    event AssetUpdated(address value);\\n    event CashStrategyAlreadySet(address value);\\n    event CashStrategyUpdated(address value);\\n    event CashStrategyRestaked(uint256 value);\\n    event Balance();\\n    event TotalRiskFactorUpdated(uint256 value);\\n    event Exchanged(uint256 amount, address from, address to);\\n\\n    event StrategyWeightUpdated(\\n        uint256 index,\\n        address strategy,\\n        uint256 minWeight,\\n        uint256 targetWeight,\\n        uint256 maxWeight,\\n        uint256 riskFactor,\\n        bool enabled,\\n        bool enabledReward\\n    );\\n\\n\\n    // ---  modifiers\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\n        _;\\n    }\\n\\n    modifier onlyExchanger() {\\n        require(hasRole(EXCHANGER, msg.sender), \\\"Caller is not the EXCHANGER\\\");\\n        _;\\n    }\\n\\n    modifier cashStrategySet() {\\n        require(address(cashStrategy) != address(0), \\\"Cash strategy not set yet\\\");\\n        _;\\n    }\\n\\n    modifier onlyPortfolioAgent() {\\n        require(roleManager.hasRole(PORTFOLIO_AGENT_ROLE, msg.sender), \\\"Restricted to Portfolio Agent\\\");\\n        _;\\n    }\\n\\n    // ---  constructor\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    function initialize() initializer public {\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\n        navSlippageBp = 4; // 0.04%\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation)\\n    internal\\n    onlyRole(DEFAULT_ADMIN_ROLE)\\n    override\\n    {}\\n\\n    // ---  setters\\n\\n    function setExchanger(address _exchanger) public onlyAdmin {\\n        require(_exchanger != address(0), \\\"Zero address not allowed\\\");\\n\\n        revokeRole(EXCHANGER, exchanger);\\n        grantRole(EXCHANGER, _exchanger);\\n\\n        exchanger = _exchanger;\\n        emit ExchangerUpdated(_exchanger);\\n    }\\n\\n    function setMark2Market(address _m2m) public onlyAdmin {\\n        require(_m2m != address(0), \\\"Zero address not allowed\\\");\\n\\n        m2m = IMark2Market(_m2m);\\n        emit Mark2MarketUpdated(_m2m);\\n    }\\n\\n    function setRoleManager(address _roleManager) external onlyAdmin {\\n        require(_roleManager != address(0), \\\"Zero address not allowed\\\");\\n        roleManager= IRoleManager(_roleManager);\\n        emit RoleManagerUpdated(_roleManager);\\n    }\\n\\n    function setNavSlippageBp(uint256 _navSlippageBp) public onlyPortfolioAgent {\\n        navSlippageBp = _navSlippageBp;\\n    }\\n\\n\\n    function setAsset(address _asset) public onlyAdmin {\\n        require(_asset != address(0), \\\"Zero address not allowed\\\");\\n\\n        asset = IERC20(_asset);\\n        emit AssetUpdated(_asset);\\n    }\\n\\n    function setCashStrategy(address _cashStrategy) public onlyAdmin {\\n        require(_cashStrategy != address(0), \\\"Zero address not allowed\\\");\\n\\n        if (_cashStrategy == address(cashStrategy)) {\\n            emit CashStrategyAlreadySet(_cashStrategy);\\n            return;\\n        }\\n        bool needMoveCash = address(cashStrategy) != address(0);\\n        if (needMoveCash) {\\n            // unstake everything\\n            cashStrategy.unstake(\\n                address(asset),\\n                0,\\n                address(this),\\n                true\\n            );\\n        }\\n\\n        cashStrategy = IStrategy(_cashStrategy);\\n\\n        if (needMoveCash) {\\n            uint256 amount = asset.balanceOf(address(this));\\n            if (amount > 0) {\\n                asset.transfer(address(cashStrategy), amount);\\n                cashStrategy.stake(\\n                    address(asset),\\n                    amount\\n                );\\n                emit CashStrategyRestaked(amount);\\n            }\\n        }\\n\\n        emit CashStrategyUpdated(_cashStrategy);\\n    }\\n\\n    function setForceCashStrategy(address _cashStrategy) public onlyAdmin {\\n        require(_cashStrategy != address(0), \\\"Zero address not allowed\\\");\\n\\n        if (_cashStrategy == address(cashStrategy)) {\\n            emit CashStrategyAlreadySet(_cashStrategy);\\n            return;\\n        }\\n\\n        cashStrategy = IStrategy(_cashStrategy);\\n\\n        emit CashStrategyUpdated(_cashStrategy);\\n    }\\n\\n\\n    // ---  logic\\n\\n\\n    function deposit() external override onlyExchanger cashStrategySet {\\n\\n        uint256 pmAssetBalance = asset.balanceOf(address(this));\\n        if (pmAssetBalance == 0) {\\n            // zero asset amount always fit in cash strategy but also zero stake result\\n            // so we can return now\\n            return;\\n        }\\n\\n        // Stake all free asset amounts to cash Strategy\\n        asset.transfer(address(cashStrategy), pmAssetBalance);\\n        cashStrategy.stake(\\n            address(asset),\\n            pmAssetBalance\\n        );\\n\\n    }\\n\\n\\n    function withdraw(uint256 _amount)\\n    external\\n    override\\n    onlyExchanger\\n    cashStrategySet\\n    returns (uint256, bool) {\\n\\n        // if cash strategy has enough liquidity then prevent balancing\\n        uint256 liquidationValue = cashStrategy.liquidationValue();\\n\\n        // Flag needed for exchanger for check: oncePerBlock\\n        bool isBalanced = false;\\n        if (liquidationValue > _amount) {\\n            cashStrategy.unstake(\\n                address(asset),\\n                _amount,\\n                address(this),\\n                false\\n            );\\n        } else {\\n            // balance to needed amount\\n            _balance(asset, _amount);\\n            isBalanced = true;\\n        }\\n\\n        uint256 currentBalance = asset.balanceOf(address(this));\\n\\n        // `if` is cheaper then `require` when need build complex message\\n        if (currentBalance < _amount) {\\n            revert(string(\\n                abi.encodePacked(\\n                    \\\"In portfolioManager not enough for transfer _amount: \\\",\\n                    Strings.toString(currentBalance),\\n                    \\\" < \\\",\\n                    Strings.toString(_amount)\\n                )\\n            ));\\n        }\\n\\n        // transfer back tokens\\n        asset.transfer(exchanger, _amount);\\n\\n        return (_amount, isBalanced);\\n    }\\n\\n    function claimAndBalance() external override onlyExchanger {\\n        _claimRewards();\\n        _balance();\\n    }\\n\\n    function _claimRewards() internal {\\n        StrategyWeight[] memory strategies = getAllStrategyWeights();\\n\\n        for (uint8 i; i < strategies.length; i++) {\\n            StrategyWeight memory item = strategies[i];\\n\\n            if (item.enabledReward) {\\n                IStrategy(item.strategy).claimRewards(address(this));\\n            }\\n        }\\n    }\\n\\n    function balance() public override onlyPortfolioAgent {\\n        _balance();\\n        emit Balance();\\n    }\\n\\n    function _balance() internal {\\n        // Same to zero withdrawal balance\\n        _balance(IERC20(address(0)), 0);\\n    }\\n\\n    function _balance(IERC20 withdrawToken, uint256 withdrawAmount) internal {\\n\\n        // after balancing, we need to make sure that we did not lose money when:\\n        // 1) transferring from one strategy to another\\n        // 2) when execute stake/unstake\\n\\n        // allowable losses 0.04% = USD+ mint/redeem fee\\n        uint256 minNavExpected = OvnMath.subBasisPoints(m2m.totalNetAssets(), navSlippageBp);\\n        minNavExpected = minNavExpected - withdrawAmount; // subscribe withdraw amount\\n\\n        StrategyWeight[] memory strategies = getAllStrategyWeights();\\n\\n        // 1. calc total asset equivalent\\n        uint256 totalAsset = asset.balanceOf(address(this));\\n        uint256 totalWeight = 0;\\n        for (uint8 i; i < strategies.length; i++) {\\n            if (!strategies[i].enabled) {// Skip if strategy is not enabled\\n                continue;\\n            }\\n\\n            // UnstakeFull from Strategies with targetWeight == 0\\n            if (strategies[i].targetWeight == 0) {\\n                totalAsset += IStrategy(strategies[i].strategy).unstake(\\n                    address(asset),\\n                    0,\\n                    address(this),\\n                    true\\n                );\\n            } else {\\n                totalAsset += IStrategy(strategies[i].strategy).netAssetValue();\\n                totalWeight += strategies[i].targetWeight;\\n            }\\n\\n        }\\n\\n        if (address(withdrawToken) == address(asset)) {\\n            require(totalAsset >= withdrawAmount, \\\"Trying withdraw more than liquidity available\\\");\\n            // it make to move to PortfolioManager extra asset to withdraw\\n            totalAsset = totalAsset - withdrawAmount;\\n        }\\n\\n        // 3. calc diffs for strategies liquidity\\n        Order[] memory stakeOrders = new Order[](strategies.length);\\n        uint8 stakeOrdersCount = 0;\\n        for (uint8 i; i < strategies.length; i++) {\\n\\n            if (!strategies[i].enabled) {// Skip if strategy is not enabled\\n                continue;\\n            }\\n\\n            uint256 targetLiquidity;\\n            if (strategies[i].targetWeight == 0) {\\n                targetLiquidity = 0;\\n            } else {\\n                targetLiquidity = (totalAsset * strategies[i].targetWeight) / totalWeight;\\n            }\\n\\n            uint256 currentLiquidity = IStrategy(strategies[i].strategy).netAssetValue();\\n            if (targetLiquidity == currentLiquidity) {\\n                // skip already at target strategies\\n                continue;\\n            }\\n\\n            if (targetLiquidity < currentLiquidity) {\\n                // unstake now\\n                IStrategy(strategies[i].strategy).unstake(\\n                    address(asset),\\n                    currentLiquidity - targetLiquidity,\\n                    address(this),\\n                    false\\n                );\\n            } else {\\n                // save to stake later\\n                stakeOrders[stakeOrdersCount] = Order(\\n                    true,\\n                    strategies[i].strategy,\\n                    targetLiquidity - currentLiquidity\\n                );\\n                stakeOrdersCount++;\\n            }\\n        }\\n\\n        // 4.  make staking\\n        for (uint8 i; i < stakeOrdersCount; i++) {\\n\\n            address strategy = stakeOrders[i].strategy;\\n            uint256 amount = stakeOrders[i].amount;\\n\\n            uint256 currentBalance = asset.balanceOf(address(this));\\n            if (currentBalance < amount) {\\n                amount = currentBalance;\\n            }\\n            asset.transfer(strategy, amount);\\n\\n            IStrategy(strategy).stake(\\n                address(asset),\\n                amount\\n            );\\n        }\\n\\n        require(m2m.totalNetAssets() >= minNavExpected, \\\"PM: NAV less than expected\\\");\\n\\n    }\\n\\n    function setStrategyWeights(StrategyWeight[] calldata _strategyWeights) external onlyPortfolioAgent {\\n\\n        require(_strategyWeights.length == strategyWeights.length, 'Wrong number of strategies');\\n\\n        uint256 totalTarget = 0;\\n\\n        bool[] memory updatedStrategies = new bool[](strategyWeights.length);\\n\\n        uint256 _totalRiskFactor = 0;\\n\\n        for (uint8 i = 0; i < _strategyWeights.length; i++) {\\n            StrategyWeight memory weightNew = _strategyWeights[i];\\n\\n            uint256 index = strategyWeightPositions[weightNew.strategy];\\n            require(updatedStrategies[index] != true, 'Strategy was updated');\\n\\n\\n            StrategyWeight memory weightOld = strategyWeights[index];\\n\\n            require(weightOld.strategy == weightNew.strategy, 'Incorrect strategy index');\\n            require(weightNew.minWeight <= weightNew.targetWeight, \\\"minWeight shouldn't higher than targetWeight\\\");\\n            require(weightNew.targetWeight <= weightNew.maxWeight, \\\"targetWeight shouldn't higher than maxWeight\\\");\\n\\n            totalTarget += weightNew.targetWeight;\\n\\n            strategyWeights[index] = weightNew;\\n\\n            updatedStrategies[index] = true;\\n\\n            _totalRiskFactor += (weightNew.riskFactor / 100 * weightNew.targetWeight) / 1000;\\n\\n            emit StrategyWeightUpdated(\\n                index,\\n                weightNew.strategy,\\n                weightNew.minWeight,\\n                weightNew.targetWeight,\\n                weightNew.maxWeight,\\n                weightNew.riskFactor,\\n                weightNew.enabled,\\n                weightNew.enabledReward\\n            );\\n        }\\n\\n        require(totalTarget == TOTAL_WEIGHT, \\\"Total target should equal to TOTAL_WEIGHT\\\");\\n\\n        totalRiskFactor = _totalRiskFactor;\\n        emit TotalRiskFactorUpdated(_totalRiskFactor);\\n\\n    }\\n\\n    function addStrategy(address _strategy) external onlyAdmin {\\n\\n        for (uint8 i = 0; i < strategyWeights.length; i++) {\\n            require(strategyWeights[i].strategy != _strategy, 'Strategy already exist');\\n        }\\n\\n\\n        // Strategy is disabled always when only created\\n        StrategyWeight memory strategyWeight = StrategyWeight(_strategy, 0, 0, 0, 0, false, false);\\n\\n        uint256 index; // default index = 0\\n        if(strategyWeights.length != 0){\\n            index = strategyWeights.length; // next index = length (+1)\\n        }\\n\\n        // Add strategy to last position\\n        _addStrategyWeightAt(strategyWeight, index);\\n        strategyWeightPositions[strategyWeight.strategy] = index;\\n    }\\n\\n    function removeStrategy(address _strategy) external onlyAdmin {\\n\\n        uint256 index = strategyWeightPositions[_strategy];\\n        StrategyWeight memory weight = strategyWeights[index];\\n\\n        require(weight.strategy == _strategy, 'Address strategy not equals');\\n        require(weight.targetWeight == 0, 'Target weight must be 0');\\n        require(IStrategy(weight.strategy).netAssetValue() == 0, 'Strategy nav must be 0');\\n\\n\\n        // Remove gap from array\\n        for (uint i = index; i < strategyWeights.length-1; i++){\\n\\n            StrategyWeight memory _tempWeight = strategyWeights[i+1];\\n\\n            strategyWeights[i] = _tempWeight;\\n            strategyWeightPositions[_tempWeight.strategy] = i;\\n        }\\n\\n        strategyWeights.pop();\\n        delete strategyWeightPositions[_strategy];\\n\\n    }\\n\\n\\n    function _addStrategyWeightAt(StrategyWeight memory strategyWeight, uint256 index) internal {\\n        uint256 currentLength = strategyWeights.length;\\n        // expand if need\\n        if (currentLength == 0 || currentLength - 1 < index) {\\n            uint256 additionalCount = index - currentLength + 1;\\n            for (uint8 i = 0; i < additionalCount; i++) {\\n                strategyWeights.push();\\n            }\\n        }\\n        strategyWeights[index] = strategyWeight;\\n        emit StrategyWeightUpdated(\\n            index,\\n            strategyWeight.strategy,\\n            strategyWeight.minWeight,\\n            strategyWeight.targetWeight,\\n            strategyWeight.maxWeight,\\n            strategyWeight.riskFactor,\\n            strategyWeight.enabled,\\n            strategyWeight.enabledReward\\n        );\\n    }\\n\\n\\n    function getStrategyWeight(address strategy) public override view returns (StrategyWeight memory) {\\n\\n        if (strategyWeights.length == 0) {\\n            revert('Strategy not found');\\n        }\\n\\n        StrategyWeight memory weight = strategyWeights[strategyWeightPositions[strategy]];\\n        require(weight.strategy == strategy, 'Strategy not found');\\n        return weight;\\n    }\\n\\n    function getAllStrategyWeights() public override view returns (StrategyWeight[] memory) {\\n        return strategyWeights;\\n    }\\n\\n    function getTotalRiskFactor() external override view returns (uint256) {\\n        return totalRiskFactor;\\n    }\\n\\n    function getAllStrategyWeightsWithNames() external override view returns (StrategyWeightWithName[] memory) {\\n        StrategyWeightWithName[] memory weightsWithName = new StrategyWeightWithName[](strategyWeights.length);\\n\\n        for (uint i = 0; i < strategyWeights.length; i++) {\\n            string memory name = IStrategy(strategyWeights[i].strategy).name();\\n            StrategyWeightWithName memory weight = StrategyWeightWithName(strategyWeights[i], name);\\n            weightsWithName[i] = weight;\\n        }\\n\\n        return weightsWithName;\\n    }\\n}\\n\",\"keccak256\":\"0x28f2c0813fcbd76e854743c39c833c4cb7015a143fb9307576c220705a873b4a\",\"license\":\"MIT\"},\"contracts/interfaces/IMark2Market.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IMark2Market {\\n\\n    struct StrategyAsset {\\n        address strategy;\\n        uint256 netAssetValue;\\n        uint256 liquidationValue;\\n    }\\n\\n    function strategyAssets() external view returns (StrategyAsset[] memory);\\n\\n    function totalNetAssets() external view returns (uint256);\\n\\n    function totalLiquidationAssets() external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0x97bf2a7d1d430d602aab42c73bbeb2014e2c7d1bce4290f1b62654fa837150ba\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPortfolioManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IPortfolioManager {\\n\\n\\n    // --- structs\\n\\n    struct Order {\\n        bool stake;\\n        address strategy;\\n        uint256 amount;\\n    }\\n\\n    struct StrategyWeight {\\n        address strategy;\\n        uint256 minWeight;\\n        uint256 targetWeight;\\n        uint256 maxWeight;\\n        uint256 riskFactor;\\n        bool enabled;\\n        bool enabledReward;\\n    }\\n\\n    struct StrategyWeightWithName {\\n        StrategyWeight weight;\\n        string name;\\n    }\\n\\n    function deposit() external;\\n\\n    /**\\n     * @dev\\n     * Withdraw target amount assets from strategies\\n     * Send amount to Exchanger\\n     * @return withdrawAmount - how much PortfolioManager unstake from strategies\\n     * @return isBalanced - executed or not balance function on PortfolioManager\\n     */\\n\\n    function withdraw(uint256 _amount) external returns (uint256 withdrawAmount, bool isBalanced);\\n\\n    function getStrategyWeight(address strategy) external view returns (StrategyWeight memory);\\n\\n    function getAllStrategyWeights() external view returns (StrategyWeight[] memory);\\n\\n    function claimAndBalance() external;\\n\\n    function balance() external;\\n\\n    function getTotalRiskFactor() external view returns (uint256);\\n\\n    function getAllStrategyWeightsWithNames() external view returns (StrategyWeightWithName[] memory); \\n}\\n\",\"keccak256\":\"0x91c1d2dd40caf939e731a1d995e99f1a982a5d34bcba5ea69bd3426b4d003cac\",\"license\":\"MIT\"},\"contracts/interfaces/IRoleManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IRoleManager {\\n\\n\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n}\\n\",\"keccak256\":\"0x89bd46e29de30f4645534e8cc43528ae7e0b6c464edbbdace05c3e61e0a7341f\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStrategy {\\n\\n    event Reward(uint256 amount);\\n    event PortfolioManagerUpdated(address value);\\n    event SlippagesUpdated(uint256 swapSlippageBP, uint256 navSlippageBP, uint256 stakeSlippageBP);\\n    event Stake(uint256 amount);\\n    event Unstake(uint256 amount, uint256 amountReceived);\\n\\n    function name() external view returns (string memory);\\n\\n    function stake(\\n        address _asset,\\n        uint256 _amount\\n    ) external;\\n\\n    function unstake(\\n        address _asset,\\n        uint256 _amount,\\n        address _beneficiary,\\n        bool targetIsZero\\n    ) external returns (uint256);\\n\\n    function netAssetValue() external view returns (uint256);\\n\\n    function liquidationValue() external view returns (uint256);\\n\\n    function claimRewards(address _to) external returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0x71b74b8de3d2411c1ead6c416d426673dd2ec9485ddbd84b89c53601e632bf48\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b50600054610100900460ff1615808015620000375750600054600160ff909116105b8062000067575062000054306200014160201b620027ec1760201c565b15801562000067575060005460ff166001145b620000cf5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff191660011790558015620000f3576000805461ff0019166101001790555b80156200013a576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5062000150565b6001600160a01b03163b151590565b60805161467a6200018860003960008181611177015281816111b7015281816114b2015281816114f2015261156a015261467a6000f3fe60806040526004361061023a5760003560e01c80635dbd733a1161012e578063c6bbf4cb116100ab578063da909b091161006f578063da909b09146106f4578063daaca2a414610714578063ed2a2f9d14610734578063f1d588c51461074b578063f281d4381461076b57600080fd5b8063c6bbf4cb1461066a578063cd3de5d41461067f578063d0d552dd1461069f578063d0e30db0146106bf578063d547741f146106d457600080fd5b80639b1dcfec116100f25780639b1dcfec146105e7578063a217fddf14610607578063acffa9331461061c578063b69ef8a814610633578063bd0f10531461064857600080fd5b80635dbd733a1461050057806375e8bdfa146105225780638129fc1c1461054f5780638e6c8ab31461056457806391d14854146105c757600080fd5b806336568abe116101bc5780634af8b1b7116101805780634af8b1b7146104765780634d12fca4146104985780634f1ef286146104b857806352d1902d146104cb57806359d57c1a146104e057600080fd5b806336568abe146103df5780633659cfe6146103ff578063370447711461041f5780633d92c38b1461043f5780634953bd071461046057600080fd5b8063223e547911610203578063223e54791461031a578063248a9ca31461033a57806329cb1bee1461036a5780632e1a7d4d1461038a5780632f2ff15d146103bf57600080fd5b8062435da51461023f57806301ffc9a71461027657806306e73924146102a657806311815701146102d3578063175188e8146102f8575b600080fd5b34801561024b57600080fd5b5061010354610260906001600160a01b031681565b60405161026d9190613c51565b60405180910390f35b34801561028257600080fd5b50610296610291366004613c65565b61078d565b604051901515815260200161026d565b3480156102b257600080fd5b506102c66102c1366004613cab565b6107c4565b60405161026d9190613d14565b3480156102df57600080fd5b506102ea6101025481565b60405190815260200161026d565b34801561030457600080fd5b50610318610313366004613cab565b6108be565b005b34801561032657600080fd5b50610318610335366004613cab565b610cc2565b34801561034657600080fd5b506102ea610355366004613d22565b60009081526065602052604090206001015490565b34801561037657600080fd5b5060ff54610260906001600160a01b031681565b34801561039657600080fd5b506103aa6103a5366004613d22565b610e04565b6040805192835290151560208301520161026d565b3480156103cb57600080fd5b506103186103da366004613d3b565b6110c5565b3480156103eb57600080fd5b506103186103fa366004613d3b565b6110ef565b34801561040b57600080fd5b5061031861041a366004613cab565b61116d565b34801561042b57600080fd5b5061031861043a366004613cab565b611235565b34801561044b57600080fd5b5061010054610260906001600160a01b031681565b34801561046c57600080fd5b50610101546102ea565b34801561048257600080fd5b5061048b6112d9565b60405161026d9190613db7565b3480156104a457600080fd5b5060fb54610260906001600160a01b031681565b6103186104c6366004613ea5565b6114a8565b3480156104d757600080fd5b506102ea61155d565b3480156104ec57600080fd5b506103186104fb366004613cab565b61160b565b34801561050c57600080fd5b506102ea6000805160206145de83398151915281565b34801561052e57600080fd5b506102ea61053d366004613cab565b60fd6020526000908152604090205481565b34801561055b57600080fd5b50610318611926565b34801561057057600080fd5b5061058461057f366004613d22565b611a50565b604080516001600160a01b03909816885260208801969096529486019390935260608501919091526080840152151560a0830152151560c082015260e00161026d565b3480156105d357600080fd5b506102966105e2366004613d3b565b611aac565b3480156105f357600080fd5b50610318610602366004613f35565b611ad7565b34801561061357600080fd5b506102ea600081565b34801561062857600080fd5b506102ea6101015481565b34801561063f57600080fd5b506103186120b6565b34801561065457600080fd5b506102ea6000805160206145be83398151915281565b34801561067657600080fd5b50610318612187565b34801561068b57600080fd5b5061031861069a366004613d22565b6121cd565b3480156106ab57600080fd5b506103186106ba366004613cab565b612271565b3480156106cb57600080fd5b50610318612309565b3480156106e057600080fd5b506103186106ef366004613d3b565b6124c9565b34801561070057600080fd5b5061031861070f366004613cab565b6124ee565b34801561072057600080fd5b5061031861072f366004613cab565b6125c3565b34801561074057600080fd5b506102ea620186a081565b34801561075757600080fd5b50610318610766366004613cab565b6126a0565b34801561077757600080fd5b50610780612739565b60405161026d9190613fa9565b60006001600160e01b03198216637965db0b60e01b14806107be57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6107cc613be7565b60fe546000036107f75760405162461bcd60e51b81526004016107ee90613ff7565b60405180910390fd5b6001600160a01b038216600090815260fd602052604081205460fe8054909190811061082557610825614023565b60009182526020918290206040805160e081018252600690930290910180546001600160a01b0390811680855260018301549585019590955260028201549284019290925260038101546060840152600481015460808401526005015460ff808216151560a085015261010090910416151560c08301529092508416146107be5760405162461bcd60e51b81526004016107ee90613ff7565b6108c9600033611aac565b6108e55760405162461bcd60e51b81526004016107ee90614039565b6001600160a01b038116600090815260fd602052604081205460fe80549192918390811061091557610915614023565b60009182526020918290206040805160e081018252600690930290910180546001600160a01b0390811680855260018301549585019590955260028201549284019290925260038101546060840152600481015460808401526005015460ff808216151560a085015261010090910416151560c08301529092508416146109de5760405162461bcd60e51b815260206004820152601b60248201527f41646472657373207374726174656779206e6f7420657175616c73000000000060448201526064016107ee565b604081015115610a2a5760405162461bcd60e51b8152602060048201526017602482015276054617267657420776569676874206d757374206265203604c1b60448201526064016107ee565b80600001516001600160a01b031663a3673b386040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a909190614067565b15610ad65760405162461bcd60e51b815260206004820152601660248201527505374726174656779206e6176206d75737420626520360541b60448201526064016107ee565b815b60fe54610ae790600190614096565b811015610c4457600060fe610afd8360016140a9565b81548110610b0d57610b0d614023565b60009182526020918290206040805160e081018252600690930290910180546001600160a01b03168352600181015493830193909352600283015490820152600382015460608201526004820154608082015260059091015460ff808216151560a084015261010090910416151560c082015260fe8054919250829184908110610b9957610b99614023565b6000918252602080832084516006939093020180546001600160a01b0319166001600160a01b039384161781558482015160018201556040808601516002830155606086015160038301556080860151600483015560a08601516005909201805460c09097015161ffff1990971692151561ff0019169290921761010096151596909602959095179055935116815260fd909252902081905580610c3c816140bc565b915050610ad8565b5060fe805480610c5657610c566140d5565b6000828152602080822060066000199094019384020180546001600160a01b031916815560018101839055600281018390556003810183905560048101839055600501805461ffff19169055919092556001600160a01b0394909416815260fd90935250506040812055565b610ccd600033611aac565b610ce95760405162461bcd60e51b81526004016107ee90614039565b60005b60fe5460ff82161015610d8b57816001600160a01b031660fe8260ff1681548110610d1957610d19614023565b60009182526020909120600690910201546001600160a01b031603610d795760405162461bcd60e51b815260206004820152601660248201527514dd1c985d1959de48185b1c9958591e48195e1a5cdd60521b60448201526064016107ee565b80610d83816140eb565b915050610cec565b506040805160e0810182526001600160a01b0383168152600060208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260fe5490919015610ddd575060fe545b610de782826127fb565b90516001600160a01b0316600090815260fd602052604090205550565b600080610e1f6000805160206145be83398151915233611aac565b610e3b5760405162461bcd60e51b81526004016107ee9061410a565b60ff546001600160a01b0316610e635760405162461bcd60e51b81526004016107ee90614141565b60ff54604080516312bb732d60e11b815290516000926001600160a01b031691632576e65a9160048083019260209291908290030181865afa158015610ead573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed19190614067565b9050600084821115610f615760ff5460fc5460405163f6f6b88160e01b81526001600160a01b039283169263f6f6b88192610f189291169089903090600090600401614174565b6020604051808303816000875af1158015610f37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5b9190614067565b50610f7b565b60fc54610f77906001600160a01b031686612962565b5060015b60fc546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610fac903090600401613c51565b602060405180830381865afa158015610fc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fed9190614067565b9050858110156110405761100081613261565b61100987613261565b60405160200161101a92919061419e565b60408051601f198184030181529082905262461bcd60e51b82526107ee91600401614223565b60fc5460fb5460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb92611076929116908a90600401614236565b6020604051808303816000875af1158015611095573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b9919061425d565b50949590945092505050565b6000828152606560205260409020600101546110e0816132f3565b6110ea83836132fd565b505050565b6001600160a01b038116331461115f5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016107ee565b6111698282613383565b5050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036111b55760405162461bcd60e51b81526004016107ee9061427a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166111e76133ea565b6001600160a01b03161461120d5760405162461bcd60e51b81526004016107ee906142c6565b61121681613406565b6040805160008082526020820190925261123291839190613411565b50565b611240600033611aac565b61125c5760405162461bcd60e51b81526004016107ee90614039565b6001600160a01b0381166112825760405162461bcd60e51b81526004016107ee90614312565b61010080546001600160a01b0319166001600160a01b0383161790556040517f2387291c358bb5414b9fdcdfeb40efddb696908065a6533e47bf60b395f7dcfd906112ce908390613c51565b60405180910390a150565b60fe546060906000906001600160401b038111156112f9576112f9613e38565b60405190808252806020026020018201604052801561133257816020015b61131f613c31565b8152602001906001900390816113175790505b50905060005b60fe548110156114a257600060fe828154811061135757611357614023565b60009182526020822060069091020154604080516306fdde0360e01b815290516001600160a01b03909216926306fdde03926004808401938290030181865afa1580156113a8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113d09190810190614344565b90506000604051806040016040528060fe85815481106113f2576113f2614023565b60009182526020918290206040805160e081018252600690930290910180546001600160a01b0316835260018101548385015260028101549183019190915260038101546060830152600481015460808301526005015460ff808216151560a084015261010090910416151560c08201528252018390528451909150819085908590811061148257611482614023565b60200260200101819052505050808061149a906140bc565b915050611338565b50919050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036114f05760405162461bcd60e51b81526004016107ee9061427a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166115226133ea565b6001600160a01b0316146115485760405162461bcd60e51b81526004016107ee906142c6565b61155182613406565b61116982826001613411565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146115f85760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c6044820152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b60648201526084016107ee565b506000805160206145fe83398151915290565b611616600033611aac565b6116325760405162461bcd60e51b81526004016107ee90614039565b6001600160a01b0381166116585760405162461bcd60e51b81526004016107ee90614312565b60ff546001600160a01b039081169082160361169d577f47ffb57d9975263bcf9c547a81d76b51e81fd87f6a69b8189e744921dda0005c816040516112ce9190613c51565b60ff546001600160a01b0316158015906117325760ff5460fc5460405163f6f6b88160e01b81526001600160a01b039283169263f6f6b881926116ed929116906000903090600190600401614174565b6020604051808303816000875af115801561170c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117309190614067565b505b60ff80546001600160a01b0319166001600160a01b03841617905580156118eb5760fc546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611784903090600401613c51565b602060405180830381865afa1580156117a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c59190614067565b905080156118e95760fc5460ff5460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb92611803929116908590600401614236565b6020604051808303816000875af1158015611822573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611846919061425d565b5060ff5460fc546040516356e4bb9760e11b81526001600160a01b039283169263adc9772e9261187d929116908590600401614236565b600060405180830381600087803b15801561189757600080fd5b505af11580156118ab573d6000803e3d6000fd5b505050507f0eab4ceb0e0bf74211211d85efd51fec6d84d5ce7719dd107af8818194bcd97f816040516118e091815260200190565b60405180910390a15b505b7fd82ec5aca3f5d594d6f9a7d8a97e332f1e6319efddf9b0bf445d87348ac4b0e38260405161191a9190613c51565b60405180910390a15050565b600054610100900460ff16158080156119465750600054600160ff909116105b806119675750611955306127ec565b158015611967575060005460ff166001145b6119ca5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016107ee565b6000805460ff1916600117905580156119ed576000805461ff0019166101001790555b6119f561357c565b6119fd61357c565b611a086000336132fd565b6004610102558015611232576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020016112ce565b60fe8181548110611a6057600080fd5b60009182526020909120600690910201805460018201546002830154600384015460048501546005909501546001600160a01b0390941695509193909260ff8082169161010090041687565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61010354604051632474521560e21b81526001600160a01b03909116906391d1485490611b18906000805160206145de8339815191529033906004016143ba565b602060405180830381865afa158015611b35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b59919061425d565b611b755760405162461bcd60e51b81526004016107ee906143d1565b60fe548114611bc65760405162461bcd60e51b815260206004820152601a60248201527f57726f6e67206e756d626572206f66207374726174656769657300000000000060448201526064016107ee565b60fe5460009081906001600160401b03811115611be557611be5613e38565b604051908082528060200260200182016040528015611c0e578160200160208202803683370190505b5090506000805b60ff811685111561201157600086868360ff16818110611c3757611c37614023565b905060e00201803603810190611c4d9190614408565b80516001600160a01b0316600090815260fd6020526040902054855191925090859082908110611c7f57611c7f614023565b602002602001015115156001151503611cd15760405162461bcd60e51b815260206004820152601460248201527314dd1c985d1959de481dd85cc81d5c19185d195960621b60448201526064016107ee565b600060fe8281548110611ce657611ce6614023565b60009182526020918290206040805160e081018252600690930290910180546001600160a01b0390811680855260018301549585019590955260028201549284019290925260038101546060840152600481015460808401526005015460ff808216151560a085015261010090910416151560c083015285519193501614611dab5760405162461bcd60e51b8152602060048201526018602482015277092dcc6dee4e4cac6e840e6e8e4c2e8cacef240d2dcc8caf60431b60448201526064016107ee565b826040015183602001511115611e185760405162461bcd60e51b815260206004820152602c60248201527f6d696e5765696768742073686f756c646e277420686967686572207468616e2060448201526b1d185c99d95d15d95a59da1d60a21b60648201526084016107ee565b826060015183604001511115611e855760405162461bcd60e51b815260206004820152602c60248201527f7461726765745765696768742073686f756c646e27742068696768657220746860448201526b185b881b585e15d95a59da1d60a21b60648201526084016107ee565b6040830151611e9490886140a9565b96508260fe8381548110611eaa57611eaa614023565b600091825260209182902083516006929092020180546001600160a01b0319166001600160a01b039092169190911781559082015160018083019190915560408301516002830155606083015160038301556080830151600483015560a08301516005909201805460c09094015161ffff1990941692151561ff00191692909217610100931515939093029290921790558651879084908110611f4f57611f4f614023565b6020026020010190151590811515815250506103e8836040015160648560800151611f7a919061449f565b611f8491906144c1565b611f8e919061449f565b611f9890866140a9565b94507fc7d6a10819f5d6f3fd2acf9d38519fb9ca604adcf565d719841b60c161c6730182846000015185602001518660400151876060015188608001518960a001518a60c00151604051611ff39897969594939291906144d8565b60405180910390a15050508080612009906140eb565b915050611c15565b50620186a083146120765760405162461bcd60e51b815260206004820152602960248201527f546f74616c207461726765742073686f756c6420657175616c20746f20544f54604482015268105317d5d15251d21560ba1b60648201526084016107ee565b6101018190556040518181527fe2ee1ef0b4d76337ccec0a920efb7ded63e020263ae1dc0a23754194693d62699060200160405180910390a15050505050565b61010354604051632474521560e21b81526001600160a01b03909116906391d14854906120f7906000805160206145de8339815191529033906004016143ba565b602060405180830381865afa158015612114573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612138919061425d565b6121545760405162461bcd60e51b81526004016107ee906143d1565b61215c6135e7565b6040517f0ef67887023bd7b8411cf35c89d19498bc1c980684932ef5f5b0559bfac80d9a90600090a1565b61219f6000805160206145be83398151915233611aac565b6121bb5760405162461bcd60e51b81526004016107ee9061410a565b6121c36135f2565b6121cb6135e7565b565b61010354604051632474521560e21b81526001600160a01b03909116906391d148549061220e906000805160206145de8339815191529033906004016143ba565b602060405180830381865afa15801561222b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224f919061425d565b61226b5760405162461bcd60e51b81526004016107ee906143d1565b61010255565b61227c600033611aac565b6122985760405162461bcd60e51b81526004016107ee90614039565b6001600160a01b0381166122be5760405162461bcd60e51b81526004016107ee90614312565b60fc80546001600160a01b0319166001600160a01b0383161790556040517f80758ef37af3558d372b5a6b2d6906a49e09a13921e7de88ad18525a6f6d5a9a906112ce908390613c51565b6123216000805160206145be83398151915233611aac565b61233d5760405162461bcd60e51b81526004016107ee9061410a565b60ff546001600160a01b03166123655760405162461bcd60e51b81526004016107ee90614141565b60fc546040516370a0823160e01b81526000916001600160a01b0316906370a0823190612396903090600401613c51565b602060405180830381865afa1580156123b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d79190614067565b9050806000036123e45750565b60fc5460ff5460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb9261241a929116908590600401614236565b6020604051808303816000875af1158015612439573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245d919061425d565b5060ff5460fc546040516356e4bb9760e11b81526001600160a01b039283169263adc9772e92612494929116908590600401614236565b600060405180830381600087803b1580156124ae57600080fd5b505af11580156124c2573d6000803e3d6000fd5b5050505050565b6000828152606560205260409020600101546124e4816132f3565b6110ea8383613383565b6124f9600033611aac565b6125155760405162461bcd60e51b81526004016107ee90614039565b6001600160a01b03811661253b5760405162461bcd60e51b81526004016107ee90614312565b60fb54612560906000805160206145be833981519152906001600160a01b03166124c9565b6125786000805160206145be833981519152826110c5565b60fb80546001600160a01b0319166001600160a01b0383161790556040517f1af34e943bb581f62718acd39caf1a640e9ff89789a197745e259d1f40cd9bd6906112ce908390613c51565b6125ce600033611aac565b6125ea5760405162461bcd60e51b81526004016107ee90614039565b6001600160a01b0381166126105760405162461bcd60e51b81526004016107ee90614312565b60ff546001600160a01b0390811690821603612655577f47ffb57d9975263bcf9c547a81d76b51e81fd87f6a69b8189e744921dda0005c816040516112ce9190613c51565b60ff80546001600160a01b0319166001600160a01b0383161790556040517fd82ec5aca3f5d594d6f9a7d8a97e332f1e6319efddf9b0bf445d87348ac4b0e3906112ce908390613c51565b6126ab600033611aac565b6126c75760405162461bcd60e51b81526004016107ee90614039565b6001600160a01b0381166126ed5760405162461bcd60e51b81526004016107ee90614312565b61010380546001600160a01b0319166001600160a01b0383161790556040517f5a7ef52f6714a981ffe676ce3c4a14db59929bd3f8ca82bb6cf9e230fa8a50c9906112ce908390613c51565b606060fe805480602002602001604051908101604052809291908181526020016000905b828210156127e35760008481526020908190206040805160e0810182526006860290920180546001600160a01b031683526001808201548486015260028201549284019290925260038101546060840152600481015460808401526005015460ff808216151560a085015261010090910416151560c0830152908352909201910161275d565b50505050905090565b6001600160a01b03163b151590565b60fe54801580612814575081612812600183614096565b105b156128615760006128258284614096565b6128309060016140a9565b905060005b818160ff16101561285e5760fe8054600101815560005280612856816140eb565b915050612835565b50505b8260fe838154811061287557612875614023565b6000918252602091829020835160069092020180546001600160a01b039092166001600160a01b031990921691909117815582820151600182015560408084015160028301556060808501516003840155608080860151600485015560a0808701516005909501805460c09889015115156101000261ff00199715159790971661ffff19909116179590951790945588519489015189840151928a0151918a0151948a0151968a015193517fc7d6a10819f5d6f3fd2acf9d38519fb9ca604adcf565d719841b60c161c6730197612955978b9790969395949390926144d8565b60405180910390a1505050565b60006129e861010060009054906101000a90046001600160a01b03166001600160a01b031663890a8c4f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156129bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129df9190614067565b610102546136bf565b90506129f48282614096565b90506000612a00612739565b60fc546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190612a36903090600401613c51565b602060405180830381865afa158015612a53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a779190614067565b90506000805b83518160ff161015612c5457838160ff1681518110612a9e57612a9e614023565b602002602001015160a0015115612c4257838160ff1681518110612ac457612ac4614023565b602002602001015160400151600003612b8557838160ff1681518110612aec57612aec614023565b60209081029190910101515160fc5460405163f6f6b88160e01b81526001600160a01b039283169263f6f6b88192612b31929116906000903090600190600401614174565b6020604051808303816000875af1158015612b50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b749190614067565b612b7e90846140a9565b9250612c42565b838160ff1681518110612b9a57612b9a614023565b6020026020010151600001516001600160a01b031663a3673b386040518163ffffffff1660e01b8152600401602060405180830381865afa158015612be3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c079190614067565b612c1190846140a9565b9250838160ff1681518110612c2857612c28614023565b60200260200101516040015182612c3f91906140a9565b91505b80612c4c816140eb565b915050612a7d565b5060fc546001600160a01b0390811690871603612cde5784821015612cd15760405162461bcd60e51b815260206004820152602d60248201527f547279696e67207769746864726177206d6f7265207468616e206c697175696460448201526c69747920617661696c61626c6560981b60648201526084016107ee565b612cdb8583614096565b91505b600083516001600160401b03811115612cf957612cf9613e38565b604051908082528060200260200182016040528015612d4457816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181612d175790505b5090506000805b85518160ff161015612fc757858160ff1681518110612d6c57612d6c614023565b602002602001015160a0015115612fb5576000868260ff1681518110612d9457612d94614023565b602002602001015160400151600003612daf57506000612de9565b84878360ff1681518110612dc557612dc5614023565b60200260200101516040015187612ddc91906144c1565b612de6919061449f565b90505b6000878360ff1681518110612e0057612e00614023565b6020026020010151600001516001600160a01b031663a3673b386040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e6d9190614067565b9050808203612e7d575050612fb5565b80821015612f3157878360ff1681518110612e9a57612e9a614023565b60209081029190910101515160fc546001600160a01b039182169163f6f6b8819116612ec68585614096565b3060006040518563ffffffff1660e01b8152600401612ee89493929190614174565b6020604051808303816000875af1158015612f07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f2b9190614067565b50612fb2565b6040518060600160405280600115158152602001898560ff1681518110612f5a57612f5a614023565b6020026020010151600001516001600160a01b031681526020018284612f809190614096565b815250858560ff1681518110612f9857612f98614023565b60200260200101819052508380612fae906140eb565b9450505b50505b80612fbf816140eb565b915050612d4b565b5060005b8160ff168160ff16101561319a576000838260ff1681518110612ff057612ff0614023565b60200260200101516020015190506000848360ff168151811061301557613015614023565b602090810291909101015160409081015160fc5491516370a0823160e01b81529092506000916001600160a01b0316906370a0823190613059903090600401613c51565b602060405180830381865afa158015613076573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061309a9190614067565b9050818110156130a8578091505b60fc5460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb906130da9086908690600401614236565b6020604051808303816000875af11580156130f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061311d919061425d565b5060fc546040516356e4bb9760e11b81526001600160a01b038581169263adc9772e9261315292909116908690600401614236565b600060405180830381600087803b15801561316c57600080fd5b505af1158015613180573d6000803e3d6000fd5b505050505050508080613192906140eb565b915050612fcb565b50610100546040805163890a8c4f60e01b8152905188926001600160a01b03169163890a8c4f9160048083019260209291908290030181865afa1580156131e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132099190614067565b10156132575760405162461bcd60e51b815260206004820152601a60248201527f504d3a204e4156206c657373207468616e20657870656374656400000000000060448201526064016107ee565b5050505050505050565b6060600061326e836136e9565b60010190506000816001600160401b0381111561328d5761328d613e38565b6040519080825280601f01601f1916602001820160405280156132b7576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846132c157509392505050565b61123281336137c1565b6133078282611aac565b6111695760008281526065602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561333f3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61338d8282611aac565b156111695760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000805160206145fe833981519152546001600160a01b031690565b6000611169816132f3565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615613444576110ea836137f4565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561349e575060408051601f3d908101601f1916820190925261349b91810190614067565b60015b6135015760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016107ee565b6000805160206145fe83398151915281146135705760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016107ee565b506110ea83838361388e565b600054610100900460ff166121cb5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016107ee565b6121cb600080612962565b60006135fc612739565b905060005b81518160ff161015611169576000828260ff168151811061362457613624614023565b602002602001015190508060c00151156136ac578051604051633bd73ee360e21b81526001600160a01b039091169063ef5cfb8c90613667903090600401613c51565b6020604051808303816000875af1158015613686573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136aa9190614067565b505b50806136b7816140eb565b915050613601565b60006127106136ce8382614096565b6136d890856144c1565b6136e2919061449f565b9392505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106137285772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310613754576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061377257662386f26fc10000830492506010015b6305f5e100831061378a576305f5e100830492506008015b612710831061379e57612710830492506004015b606483106137b0576064830492506002015b600a83106107be5760010192915050565b6137cb8282611aac565b611169576137d8816138b9565b6137e38360206138cb565b60405160200161101a92919061451b565b6137fd816127ec565b61385f5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016107ee565b6000805160206145fe83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61389783613a66565b6000825111806138a45750805b156110ea576138b38383613aa6565b50505050565b60606107be6001600160a01b03831660145b606060006138da8360026144c1565b6138e59060026140a9565b6001600160401b038111156138fc576138fc613e38565b6040519080825280601f01601f191660200182016040528015613926576020820181803683370190505b509050600360fc1b8160008151811061394157613941614023565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061397057613970614023565b60200101906001600160f81b031916908160001a90535060006139948460026144c1565b61399f9060016140a9565b90505b6001811115613a17576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106139d3576139d3614023565b1a60f81b8282815181106139e9576139e9614023565b60200101906001600160f81b031916908160001a90535060049490941c93613a108161458a565b90506139a2565b5083156136e25760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107ee565b613a6f816137f4565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606136e2838360405180606001604052806027815260200161461e602791396060600080856001600160a01b031685604051613ae391906145a1565b600060405180830381855af49150503d8060008114613b1e576040519150601f19603f3d011682016040523d82523d6000602084013e613b23565b606091505b5091509150613b3486838387613b3e565b9695505050505050565b60608315613bab578251600003613ba457613b58856127ec565b613ba45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107ee565b5081613bb5565b613bb58383613bbd565b949350505050565b815115613bcd5781518083602001fd5b8060405162461bcd60e51b81526004016107ee9190614223565b6040518060e0016040528060006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525090565b6040518060400160405280613c44613be7565b8152602001606081525090565b6001600160a01b0391909116815260200190565b600060208284031215613c7757600080fd5b81356001600160e01b0319811681146136e257600080fd5b80356001600160a01b0381168114613ca657600080fd5b919050565b600060208284031215613cbd57600080fd5b6136e282613c8f565b80516001600160a01b031682526020808201519083015260408082015190830152606080820151908301526080808201519083015260a08181015115159083015260c0908101511515910152565b60e081016107be8284613cc6565b600060208284031215613d3457600080fd5b5035919050565b60008060408385031215613d4e57600080fd5b82359150613d5e60208401613c8f565b90509250929050565b60005b83811015613d82578181015183820152602001613d6a565b50506000910152565b60008151808452613da3816020860160208601613d67565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015613e2b57603f198886030184528151610100613dff878351613cc6565b8782015191508060e0880152613e1781880183613d8b565b965050509285019290850190600101613dde565b5092979650505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715613e7657613e76613e38565b604052919050565b60006001600160401b03821115613e9757613e97613e38565b50601f01601f191660200190565b60008060408385031215613eb857600080fd5b613ec183613c8f565b915060208301356001600160401b03811115613edc57600080fd5b8301601f81018513613eed57600080fd5b8035613f00613efb82613e7e565b613e4e565b818152866020838501011115613f1557600080fd5b816020840160208301376000602083830101528093505050509250929050565b60008060208385031215613f4857600080fd5b82356001600160401b0380821115613f5f57600080fd5b818501915085601f830112613f7357600080fd5b813581811115613f8257600080fd5b86602060e083028501011115613f9757600080fd5b60209290920196919550909350505050565b6020808252825182820181905260009190848201906040850190845b81811015613feb57613fd8838551613cc6565b9284019260e09290920191600101613fc5565b50909695505050505050565b60208082526012908201527114dd1c985d1959de481b9bdd08199bdd5b9960721b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6020808252601490820152735265737472696374656420746f2061646d696e7360601b604082015260600190565b60006020828403121561407957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156107be576107be614080565b808201808211156107be576107be614080565b6000600182016140ce576140ce614080565b5060010190565b634e487b7160e01b600052603160045260246000fd5b600060ff821660ff810361410157614101614080565b60010192915050565b6020808252601b908201527f43616c6c6572206973206e6f74207468652045584348414e4745520000000000604082015260600190565b60208082526019908201527810d85cda081cdd1c985d1959de481b9bdd081cd95d081e595d603a1b604082015260600190565b6001600160a01b039485168152602081019390935292166040820152901515606082015260800190565b7f496e20706f7274666f6c696f4d616e61676572206e6f7420656e6f7567682066815274037b9103a3930b739b332b9102fb0b6b7bab73a1d1605d1b6020820152600083516141f4816035850160208801613d67565b620101e160ed1b6035918401918201528351614217816038840160208801613d67565b01603801949350505050565b6020815260006136e26020830184613d8b565b6001600160a01b03929092168252602082015260400190565b801515811461123257600080fd5b60006020828403121561426f57600080fd5b81516136e28161424f565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60208082526018908201527716995c9bc81859191c995cdcc81b9bdd08185b1b1bddd95960421b604082015260600190565b60006020828403121561435657600080fd5b81516001600160401b0381111561436c57600080fd5b8201601f8101841361437d57600080fd5b805161438b613efb82613e7e565b8181528560208385010111156143a057600080fd5b6143b1826020830160208601613d67565b95945050505050565b9182526001600160a01b0316602082015260400190565b6020808252601d908201527f5265737472696374656420746f20506f7274666f6c696f204167656e74000000604082015260600190565b600060e0828403121561441a57600080fd5b60405160e081018181106001600160401b038211171561443c5761443c613e38565b60405261444883613c8f565b81526020830135602082015260408301356040820152606083013560608201526080830135608082015260a08301356144808161424f565b60a082015260c08301356144938161424f565b60c08201529392505050565b6000826144bc57634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176107be576107be614080565b9788526001600160a01b0396909616602088015260408701949094526060860192909252608085015260a0840152151560c0830152151560e08201526101000190565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b81526000835161454d816017850160208801613d67565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161457e816028840160208801613d67565b01602801949350505050565b60008161459957614599614080565b506000190190565b600082516145b3818460208701613d67565b919091019291505056fe3eb675f159e6ca6cf5de6bfbbc8c4521cfd428f5e9166e51094d5898504caf2dd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde9137360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212203bffb4c8fa2fb4336d68379f4a79f1b75b8735835be4cad03d7afe02ec5f4daa64736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061023a5760003560e01c80635dbd733a1161012e578063c6bbf4cb116100ab578063da909b091161006f578063da909b09146106f4578063daaca2a414610714578063ed2a2f9d14610734578063f1d588c51461074b578063f281d4381461076b57600080fd5b8063c6bbf4cb1461066a578063cd3de5d41461067f578063d0d552dd1461069f578063d0e30db0146106bf578063d547741f146106d457600080fd5b80639b1dcfec116100f25780639b1dcfec146105e7578063a217fddf14610607578063acffa9331461061c578063b69ef8a814610633578063bd0f10531461064857600080fd5b80635dbd733a1461050057806375e8bdfa146105225780638129fc1c1461054f5780638e6c8ab31461056457806391d14854146105c757600080fd5b806336568abe116101bc5780634af8b1b7116101805780634af8b1b7146104765780634d12fca4146104985780634f1ef286146104b857806352d1902d146104cb57806359d57c1a146104e057600080fd5b806336568abe146103df5780633659cfe6146103ff578063370447711461041f5780633d92c38b1461043f5780634953bd071461046057600080fd5b8063223e547911610203578063223e54791461031a578063248a9ca31461033a57806329cb1bee1461036a5780632e1a7d4d1461038a5780632f2ff15d146103bf57600080fd5b8062435da51461023f57806301ffc9a71461027657806306e73924146102a657806311815701146102d3578063175188e8146102f8575b600080fd5b34801561024b57600080fd5b5061010354610260906001600160a01b031681565b60405161026d9190613c51565b60405180910390f35b34801561028257600080fd5b50610296610291366004613c65565b61078d565b604051901515815260200161026d565b3480156102b257600080fd5b506102c66102c1366004613cab565b6107c4565b60405161026d9190613d14565b3480156102df57600080fd5b506102ea6101025481565b60405190815260200161026d565b34801561030457600080fd5b50610318610313366004613cab565b6108be565b005b34801561032657600080fd5b50610318610335366004613cab565b610cc2565b34801561034657600080fd5b506102ea610355366004613d22565b60009081526065602052604090206001015490565b34801561037657600080fd5b5060ff54610260906001600160a01b031681565b34801561039657600080fd5b506103aa6103a5366004613d22565b610e04565b6040805192835290151560208301520161026d565b3480156103cb57600080fd5b506103186103da366004613d3b565b6110c5565b3480156103eb57600080fd5b506103186103fa366004613d3b565b6110ef565b34801561040b57600080fd5b5061031861041a366004613cab565b61116d565b34801561042b57600080fd5b5061031861043a366004613cab565b611235565b34801561044b57600080fd5b5061010054610260906001600160a01b031681565b34801561046c57600080fd5b50610101546102ea565b34801561048257600080fd5b5061048b6112d9565b60405161026d9190613db7565b3480156104a457600080fd5b5060fb54610260906001600160a01b031681565b6103186104c6366004613ea5565b6114a8565b3480156104d757600080fd5b506102ea61155d565b3480156104ec57600080fd5b506103186104fb366004613cab565b61160b565b34801561050c57600080fd5b506102ea6000805160206145de83398151915281565b34801561052e57600080fd5b506102ea61053d366004613cab565b60fd6020526000908152604090205481565b34801561055b57600080fd5b50610318611926565b34801561057057600080fd5b5061058461057f366004613d22565b611a50565b604080516001600160a01b03909816885260208801969096529486019390935260608501919091526080840152151560a0830152151560c082015260e00161026d565b3480156105d357600080fd5b506102966105e2366004613d3b565b611aac565b3480156105f357600080fd5b50610318610602366004613f35565b611ad7565b34801561061357600080fd5b506102ea600081565b34801561062857600080fd5b506102ea6101015481565b34801561063f57600080fd5b506103186120b6565b34801561065457600080fd5b506102ea6000805160206145be83398151915281565b34801561067657600080fd5b50610318612187565b34801561068b57600080fd5b5061031861069a366004613d22565b6121cd565b3480156106ab57600080fd5b506103186106ba366004613cab565b612271565b3480156106cb57600080fd5b50610318612309565b3480156106e057600080fd5b506103186106ef366004613d3b565b6124c9565b34801561070057600080fd5b5061031861070f366004613cab565b6124ee565b34801561072057600080fd5b5061031861072f366004613cab565b6125c3565b34801561074057600080fd5b506102ea620186a081565b34801561075757600080fd5b50610318610766366004613cab565b6126a0565b34801561077757600080fd5b50610780612739565b60405161026d9190613fa9565b60006001600160e01b03198216637965db0b60e01b14806107be57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6107cc613be7565b60fe546000036107f75760405162461bcd60e51b81526004016107ee90613ff7565b60405180910390fd5b6001600160a01b038216600090815260fd602052604081205460fe8054909190811061082557610825614023565b60009182526020918290206040805160e081018252600690930290910180546001600160a01b0390811680855260018301549585019590955260028201549284019290925260038101546060840152600481015460808401526005015460ff808216151560a085015261010090910416151560c08301529092508416146107be5760405162461bcd60e51b81526004016107ee90613ff7565b6108c9600033611aac565b6108e55760405162461bcd60e51b81526004016107ee90614039565b6001600160a01b038116600090815260fd602052604081205460fe80549192918390811061091557610915614023565b60009182526020918290206040805160e081018252600690930290910180546001600160a01b0390811680855260018301549585019590955260028201549284019290925260038101546060840152600481015460808401526005015460ff808216151560a085015261010090910416151560c08301529092508416146109de5760405162461bcd60e51b815260206004820152601b60248201527f41646472657373207374726174656779206e6f7420657175616c73000000000060448201526064016107ee565b604081015115610a2a5760405162461bcd60e51b8152602060048201526017602482015276054617267657420776569676874206d757374206265203604c1b60448201526064016107ee565b80600001516001600160a01b031663a3673b386040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a909190614067565b15610ad65760405162461bcd60e51b815260206004820152601660248201527505374726174656779206e6176206d75737420626520360541b60448201526064016107ee565b815b60fe54610ae790600190614096565b811015610c4457600060fe610afd8360016140a9565b81548110610b0d57610b0d614023565b60009182526020918290206040805160e081018252600690930290910180546001600160a01b03168352600181015493830193909352600283015490820152600382015460608201526004820154608082015260059091015460ff808216151560a084015261010090910416151560c082015260fe8054919250829184908110610b9957610b99614023565b6000918252602080832084516006939093020180546001600160a01b0319166001600160a01b039384161781558482015160018201556040808601516002830155606086015160038301556080860151600483015560a08601516005909201805460c09097015161ffff1990971692151561ff0019169290921761010096151596909602959095179055935116815260fd909252902081905580610c3c816140bc565b915050610ad8565b5060fe805480610c5657610c566140d5565b6000828152602080822060066000199094019384020180546001600160a01b031916815560018101839055600281018390556003810183905560048101839055600501805461ffff19169055919092556001600160a01b0394909416815260fd90935250506040812055565b610ccd600033611aac565b610ce95760405162461bcd60e51b81526004016107ee90614039565b60005b60fe5460ff82161015610d8b57816001600160a01b031660fe8260ff1681548110610d1957610d19614023565b60009182526020909120600690910201546001600160a01b031603610d795760405162461bcd60e51b815260206004820152601660248201527514dd1c985d1959de48185b1c9958591e48195e1a5cdd60521b60448201526064016107ee565b80610d83816140eb565b915050610cec565b506040805160e0810182526001600160a01b0383168152600060208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260fe5490919015610ddd575060fe545b610de782826127fb565b90516001600160a01b0316600090815260fd602052604090205550565b600080610e1f6000805160206145be83398151915233611aac565b610e3b5760405162461bcd60e51b81526004016107ee9061410a565b60ff546001600160a01b0316610e635760405162461bcd60e51b81526004016107ee90614141565b60ff54604080516312bb732d60e11b815290516000926001600160a01b031691632576e65a9160048083019260209291908290030181865afa158015610ead573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed19190614067565b9050600084821115610f615760ff5460fc5460405163f6f6b88160e01b81526001600160a01b039283169263f6f6b88192610f189291169089903090600090600401614174565b6020604051808303816000875af1158015610f37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5b9190614067565b50610f7b565b60fc54610f77906001600160a01b031686612962565b5060015b60fc546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610fac903090600401613c51565b602060405180830381865afa158015610fc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fed9190614067565b9050858110156110405761100081613261565b61100987613261565b60405160200161101a92919061419e565b60408051601f198184030181529082905262461bcd60e51b82526107ee91600401614223565b60fc5460fb5460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb92611076929116908a90600401614236565b6020604051808303816000875af1158015611095573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b9919061425d565b50949590945092505050565b6000828152606560205260409020600101546110e0816132f3565b6110ea83836132fd565b505050565b6001600160a01b038116331461115f5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016107ee565b6111698282613383565b5050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036111b55760405162461bcd60e51b81526004016107ee9061427a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166111e76133ea565b6001600160a01b03161461120d5760405162461bcd60e51b81526004016107ee906142c6565b61121681613406565b6040805160008082526020820190925261123291839190613411565b50565b611240600033611aac565b61125c5760405162461bcd60e51b81526004016107ee90614039565b6001600160a01b0381166112825760405162461bcd60e51b81526004016107ee90614312565b61010080546001600160a01b0319166001600160a01b0383161790556040517f2387291c358bb5414b9fdcdfeb40efddb696908065a6533e47bf60b395f7dcfd906112ce908390613c51565b60405180910390a150565b60fe546060906000906001600160401b038111156112f9576112f9613e38565b60405190808252806020026020018201604052801561133257816020015b61131f613c31565b8152602001906001900390816113175790505b50905060005b60fe548110156114a257600060fe828154811061135757611357614023565b60009182526020822060069091020154604080516306fdde0360e01b815290516001600160a01b03909216926306fdde03926004808401938290030181865afa1580156113a8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113d09190810190614344565b90506000604051806040016040528060fe85815481106113f2576113f2614023565b60009182526020918290206040805160e081018252600690930290910180546001600160a01b0316835260018101548385015260028101549183019190915260038101546060830152600481015460808301526005015460ff808216151560a084015261010090910416151560c08201528252018390528451909150819085908590811061148257611482614023565b60200260200101819052505050808061149a906140bc565b915050611338565b50919050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036114f05760405162461bcd60e51b81526004016107ee9061427a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166115226133ea565b6001600160a01b0316146115485760405162461bcd60e51b81526004016107ee906142c6565b61155182613406565b61116982826001613411565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146115f85760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c6044820152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b60648201526084016107ee565b506000805160206145fe83398151915290565b611616600033611aac565b6116325760405162461bcd60e51b81526004016107ee90614039565b6001600160a01b0381166116585760405162461bcd60e51b81526004016107ee90614312565b60ff546001600160a01b039081169082160361169d577f47ffb57d9975263bcf9c547a81d76b51e81fd87f6a69b8189e744921dda0005c816040516112ce9190613c51565b60ff546001600160a01b0316158015906117325760ff5460fc5460405163f6f6b88160e01b81526001600160a01b039283169263f6f6b881926116ed929116906000903090600190600401614174565b6020604051808303816000875af115801561170c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117309190614067565b505b60ff80546001600160a01b0319166001600160a01b03841617905580156118eb5760fc546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611784903090600401613c51565b602060405180830381865afa1580156117a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c59190614067565b905080156118e95760fc5460ff5460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb92611803929116908590600401614236565b6020604051808303816000875af1158015611822573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611846919061425d565b5060ff5460fc546040516356e4bb9760e11b81526001600160a01b039283169263adc9772e9261187d929116908590600401614236565b600060405180830381600087803b15801561189757600080fd5b505af11580156118ab573d6000803e3d6000fd5b505050507f0eab4ceb0e0bf74211211d85efd51fec6d84d5ce7719dd107af8818194bcd97f816040516118e091815260200190565b60405180910390a15b505b7fd82ec5aca3f5d594d6f9a7d8a97e332f1e6319efddf9b0bf445d87348ac4b0e38260405161191a9190613c51565b60405180910390a15050565b600054610100900460ff16158080156119465750600054600160ff909116105b806119675750611955306127ec565b158015611967575060005460ff166001145b6119ca5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016107ee565b6000805460ff1916600117905580156119ed576000805461ff0019166101001790555b6119f561357c565b6119fd61357c565b611a086000336132fd565b6004610102558015611232576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020016112ce565b60fe8181548110611a6057600080fd5b60009182526020909120600690910201805460018201546002830154600384015460048501546005909501546001600160a01b0390941695509193909260ff8082169161010090041687565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61010354604051632474521560e21b81526001600160a01b03909116906391d1485490611b18906000805160206145de8339815191529033906004016143ba565b602060405180830381865afa158015611b35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b59919061425d565b611b755760405162461bcd60e51b81526004016107ee906143d1565b60fe548114611bc65760405162461bcd60e51b815260206004820152601a60248201527f57726f6e67206e756d626572206f66207374726174656769657300000000000060448201526064016107ee565b60fe5460009081906001600160401b03811115611be557611be5613e38565b604051908082528060200260200182016040528015611c0e578160200160208202803683370190505b5090506000805b60ff811685111561201157600086868360ff16818110611c3757611c37614023565b905060e00201803603810190611c4d9190614408565b80516001600160a01b0316600090815260fd6020526040902054855191925090859082908110611c7f57611c7f614023565b602002602001015115156001151503611cd15760405162461bcd60e51b815260206004820152601460248201527314dd1c985d1959de481dd85cc81d5c19185d195960621b60448201526064016107ee565b600060fe8281548110611ce657611ce6614023565b60009182526020918290206040805160e081018252600690930290910180546001600160a01b0390811680855260018301549585019590955260028201549284019290925260038101546060840152600481015460808401526005015460ff808216151560a085015261010090910416151560c083015285519193501614611dab5760405162461bcd60e51b8152602060048201526018602482015277092dcc6dee4e4cac6e840e6e8e4c2e8cacef240d2dcc8caf60431b60448201526064016107ee565b826040015183602001511115611e185760405162461bcd60e51b815260206004820152602c60248201527f6d696e5765696768742073686f756c646e277420686967686572207468616e2060448201526b1d185c99d95d15d95a59da1d60a21b60648201526084016107ee565b826060015183604001511115611e855760405162461bcd60e51b815260206004820152602c60248201527f7461726765745765696768742073686f756c646e27742068696768657220746860448201526b185b881b585e15d95a59da1d60a21b60648201526084016107ee565b6040830151611e9490886140a9565b96508260fe8381548110611eaa57611eaa614023565b600091825260209182902083516006929092020180546001600160a01b0319166001600160a01b039092169190911781559082015160018083019190915560408301516002830155606083015160038301556080830151600483015560a08301516005909201805460c09094015161ffff1990941692151561ff00191692909217610100931515939093029290921790558651879084908110611f4f57611f4f614023565b6020026020010190151590811515815250506103e8836040015160648560800151611f7a919061449f565b611f8491906144c1565b611f8e919061449f565b611f9890866140a9565b94507fc7d6a10819f5d6f3fd2acf9d38519fb9ca604adcf565d719841b60c161c6730182846000015185602001518660400151876060015188608001518960a001518a60c00151604051611ff39897969594939291906144d8565b60405180910390a15050508080612009906140eb565b915050611c15565b50620186a083146120765760405162461bcd60e51b815260206004820152602960248201527f546f74616c207461726765742073686f756c6420657175616c20746f20544f54604482015268105317d5d15251d21560ba1b60648201526084016107ee565b6101018190556040518181527fe2ee1ef0b4d76337ccec0a920efb7ded63e020263ae1dc0a23754194693d62699060200160405180910390a15050505050565b61010354604051632474521560e21b81526001600160a01b03909116906391d14854906120f7906000805160206145de8339815191529033906004016143ba565b602060405180830381865afa158015612114573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612138919061425d565b6121545760405162461bcd60e51b81526004016107ee906143d1565b61215c6135e7565b6040517f0ef67887023bd7b8411cf35c89d19498bc1c980684932ef5f5b0559bfac80d9a90600090a1565b61219f6000805160206145be83398151915233611aac565b6121bb5760405162461bcd60e51b81526004016107ee9061410a565b6121c36135f2565b6121cb6135e7565b565b61010354604051632474521560e21b81526001600160a01b03909116906391d148549061220e906000805160206145de8339815191529033906004016143ba565b602060405180830381865afa15801561222b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224f919061425d565b61226b5760405162461bcd60e51b81526004016107ee906143d1565b61010255565b61227c600033611aac565b6122985760405162461bcd60e51b81526004016107ee90614039565b6001600160a01b0381166122be5760405162461bcd60e51b81526004016107ee90614312565b60fc80546001600160a01b0319166001600160a01b0383161790556040517f80758ef37af3558d372b5a6b2d6906a49e09a13921e7de88ad18525a6f6d5a9a906112ce908390613c51565b6123216000805160206145be83398151915233611aac565b61233d5760405162461bcd60e51b81526004016107ee9061410a565b60ff546001600160a01b03166123655760405162461bcd60e51b81526004016107ee90614141565b60fc546040516370a0823160e01b81526000916001600160a01b0316906370a0823190612396903090600401613c51565b602060405180830381865afa1580156123b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d79190614067565b9050806000036123e45750565b60fc5460ff5460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb9261241a929116908590600401614236565b6020604051808303816000875af1158015612439573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245d919061425d565b5060ff5460fc546040516356e4bb9760e11b81526001600160a01b039283169263adc9772e92612494929116908590600401614236565b600060405180830381600087803b1580156124ae57600080fd5b505af11580156124c2573d6000803e3d6000fd5b5050505050565b6000828152606560205260409020600101546124e4816132f3565b6110ea8383613383565b6124f9600033611aac565b6125155760405162461bcd60e51b81526004016107ee90614039565b6001600160a01b03811661253b5760405162461bcd60e51b81526004016107ee90614312565b60fb54612560906000805160206145be833981519152906001600160a01b03166124c9565b6125786000805160206145be833981519152826110c5565b60fb80546001600160a01b0319166001600160a01b0383161790556040517f1af34e943bb581f62718acd39caf1a640e9ff89789a197745e259d1f40cd9bd6906112ce908390613c51565b6125ce600033611aac565b6125ea5760405162461bcd60e51b81526004016107ee90614039565b6001600160a01b0381166126105760405162461bcd60e51b81526004016107ee90614312565b60ff546001600160a01b0390811690821603612655577f47ffb57d9975263bcf9c547a81d76b51e81fd87f6a69b8189e744921dda0005c816040516112ce9190613c51565b60ff80546001600160a01b0319166001600160a01b0383161790556040517fd82ec5aca3f5d594d6f9a7d8a97e332f1e6319efddf9b0bf445d87348ac4b0e3906112ce908390613c51565b6126ab600033611aac565b6126c75760405162461bcd60e51b81526004016107ee90614039565b6001600160a01b0381166126ed5760405162461bcd60e51b81526004016107ee90614312565b61010380546001600160a01b0319166001600160a01b0383161790556040517f5a7ef52f6714a981ffe676ce3c4a14db59929bd3f8ca82bb6cf9e230fa8a50c9906112ce908390613c51565b606060fe805480602002602001604051908101604052809291908181526020016000905b828210156127e35760008481526020908190206040805160e0810182526006860290920180546001600160a01b031683526001808201548486015260028201549284019290925260038101546060840152600481015460808401526005015460ff808216151560a085015261010090910416151560c0830152908352909201910161275d565b50505050905090565b6001600160a01b03163b151590565b60fe54801580612814575081612812600183614096565b105b156128615760006128258284614096565b6128309060016140a9565b905060005b818160ff16101561285e5760fe8054600101815560005280612856816140eb565b915050612835565b50505b8260fe838154811061287557612875614023565b6000918252602091829020835160069092020180546001600160a01b039092166001600160a01b031990921691909117815582820151600182015560408084015160028301556060808501516003840155608080860151600485015560a0808701516005909501805460c09889015115156101000261ff00199715159790971661ffff19909116179590951790945588519489015189840151928a0151918a0151948a0151968a015193517fc7d6a10819f5d6f3fd2acf9d38519fb9ca604adcf565d719841b60c161c6730197612955978b9790969395949390926144d8565b60405180910390a1505050565b60006129e861010060009054906101000a90046001600160a01b03166001600160a01b031663890a8c4f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156129bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129df9190614067565b610102546136bf565b90506129f48282614096565b90506000612a00612739565b60fc546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190612a36903090600401613c51565b602060405180830381865afa158015612a53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a779190614067565b90506000805b83518160ff161015612c5457838160ff1681518110612a9e57612a9e614023565b602002602001015160a0015115612c4257838160ff1681518110612ac457612ac4614023565b602002602001015160400151600003612b8557838160ff1681518110612aec57612aec614023565b60209081029190910101515160fc5460405163f6f6b88160e01b81526001600160a01b039283169263f6f6b88192612b31929116906000903090600190600401614174565b6020604051808303816000875af1158015612b50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b749190614067565b612b7e90846140a9565b9250612c42565b838160ff1681518110612b9a57612b9a614023565b6020026020010151600001516001600160a01b031663a3673b386040518163ffffffff1660e01b8152600401602060405180830381865afa158015612be3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c079190614067565b612c1190846140a9565b9250838160ff1681518110612c2857612c28614023565b60200260200101516040015182612c3f91906140a9565b91505b80612c4c816140eb565b915050612a7d565b5060fc546001600160a01b0390811690871603612cde5784821015612cd15760405162461bcd60e51b815260206004820152602d60248201527f547279696e67207769746864726177206d6f7265207468616e206c697175696460448201526c69747920617661696c61626c6560981b60648201526084016107ee565b612cdb8583614096565b91505b600083516001600160401b03811115612cf957612cf9613e38565b604051908082528060200260200182016040528015612d4457816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181612d175790505b5090506000805b85518160ff161015612fc757858160ff1681518110612d6c57612d6c614023565b602002602001015160a0015115612fb5576000868260ff1681518110612d9457612d94614023565b602002602001015160400151600003612daf57506000612de9565b84878360ff1681518110612dc557612dc5614023565b60200260200101516040015187612ddc91906144c1565b612de6919061449f565b90505b6000878360ff1681518110612e0057612e00614023565b6020026020010151600001516001600160a01b031663a3673b386040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e6d9190614067565b9050808203612e7d575050612fb5565b80821015612f3157878360ff1681518110612e9a57612e9a614023565b60209081029190910101515160fc546001600160a01b039182169163f6f6b8819116612ec68585614096565b3060006040518563ffffffff1660e01b8152600401612ee89493929190614174565b6020604051808303816000875af1158015612f07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f2b9190614067565b50612fb2565b6040518060600160405280600115158152602001898560ff1681518110612f5a57612f5a614023565b6020026020010151600001516001600160a01b031681526020018284612f809190614096565b815250858560ff1681518110612f9857612f98614023565b60200260200101819052508380612fae906140eb565b9450505b50505b80612fbf816140eb565b915050612d4b565b5060005b8160ff168160ff16101561319a576000838260ff1681518110612ff057612ff0614023565b60200260200101516020015190506000848360ff168151811061301557613015614023565b602090810291909101015160409081015160fc5491516370a0823160e01b81529092506000916001600160a01b0316906370a0823190613059903090600401613c51565b602060405180830381865afa158015613076573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061309a9190614067565b9050818110156130a8578091505b60fc5460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb906130da9086908690600401614236565b6020604051808303816000875af11580156130f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061311d919061425d565b5060fc546040516356e4bb9760e11b81526001600160a01b038581169263adc9772e9261315292909116908690600401614236565b600060405180830381600087803b15801561316c57600080fd5b505af1158015613180573d6000803e3d6000fd5b505050505050508080613192906140eb565b915050612fcb565b50610100546040805163890a8c4f60e01b8152905188926001600160a01b03169163890a8c4f9160048083019260209291908290030181865afa1580156131e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132099190614067565b10156132575760405162461bcd60e51b815260206004820152601a60248201527f504d3a204e4156206c657373207468616e20657870656374656400000000000060448201526064016107ee565b5050505050505050565b6060600061326e836136e9565b60010190506000816001600160401b0381111561328d5761328d613e38565b6040519080825280601f01601f1916602001820160405280156132b7576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846132c157509392505050565b61123281336137c1565b6133078282611aac565b6111695760008281526065602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561333f3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61338d8282611aac565b156111695760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000805160206145fe833981519152546001600160a01b031690565b6000611169816132f3565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615613444576110ea836137f4565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561349e575060408051601f3d908101601f1916820190925261349b91810190614067565b60015b6135015760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016107ee565b6000805160206145fe83398151915281146135705760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016107ee565b506110ea83838361388e565b600054610100900460ff166121cb5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016107ee565b6121cb600080612962565b60006135fc612739565b905060005b81518160ff161015611169576000828260ff168151811061362457613624614023565b602002602001015190508060c00151156136ac578051604051633bd73ee360e21b81526001600160a01b039091169063ef5cfb8c90613667903090600401613c51565b6020604051808303816000875af1158015613686573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136aa9190614067565b505b50806136b7816140eb565b915050613601565b60006127106136ce8382614096565b6136d890856144c1565b6136e2919061449f565b9392505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106137285772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310613754576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061377257662386f26fc10000830492506010015b6305f5e100831061378a576305f5e100830492506008015b612710831061379e57612710830492506004015b606483106137b0576064830492506002015b600a83106107be5760010192915050565b6137cb8282611aac565b611169576137d8816138b9565b6137e38360206138cb565b60405160200161101a92919061451b565b6137fd816127ec565b61385f5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016107ee565b6000805160206145fe83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61389783613a66565b6000825111806138a45750805b156110ea576138b38383613aa6565b50505050565b60606107be6001600160a01b03831660145b606060006138da8360026144c1565b6138e59060026140a9565b6001600160401b038111156138fc576138fc613e38565b6040519080825280601f01601f191660200182016040528015613926576020820181803683370190505b509050600360fc1b8160008151811061394157613941614023565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061397057613970614023565b60200101906001600160f81b031916908160001a90535060006139948460026144c1565b61399f9060016140a9565b90505b6001811115613a17576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106139d3576139d3614023565b1a60f81b8282815181106139e9576139e9614023565b60200101906001600160f81b031916908160001a90535060049490941c93613a108161458a565b90506139a2565b5083156136e25760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107ee565b613a6f816137f4565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606136e2838360405180606001604052806027815260200161461e602791396060600080856001600160a01b031685604051613ae391906145a1565b600060405180830381855af49150503d8060008114613b1e576040519150601f19603f3d011682016040523d82523d6000602084013e613b23565b606091505b5091509150613b3486838387613b3e565b9695505050505050565b60608315613bab578251600003613ba457613b58856127ec565b613ba45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107ee565b5081613bb5565b613bb58383613bbd565b949350505050565b815115613bcd5781518083602001fd5b8060405162461bcd60e51b81526004016107ee9190614223565b6040518060e0016040528060006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525090565b6040518060400160405280613c44613be7565b8152602001606081525090565b6001600160a01b0391909116815260200190565b600060208284031215613c7757600080fd5b81356001600160e01b0319811681146136e257600080fd5b80356001600160a01b0381168114613ca657600080fd5b919050565b600060208284031215613cbd57600080fd5b6136e282613c8f565b80516001600160a01b031682526020808201519083015260408082015190830152606080820151908301526080808201519083015260a08181015115159083015260c0908101511515910152565b60e081016107be8284613cc6565b600060208284031215613d3457600080fd5b5035919050565b60008060408385031215613d4e57600080fd5b82359150613d5e60208401613c8f565b90509250929050565b60005b83811015613d82578181015183820152602001613d6a565b50506000910152565b60008151808452613da3816020860160208601613d67565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015613e2b57603f198886030184528151610100613dff878351613cc6565b8782015191508060e0880152613e1781880183613d8b565b965050509285019290850190600101613dde565b5092979650505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715613e7657613e76613e38565b604052919050565b60006001600160401b03821115613e9757613e97613e38565b50601f01601f191660200190565b60008060408385031215613eb857600080fd5b613ec183613c8f565b915060208301356001600160401b03811115613edc57600080fd5b8301601f81018513613eed57600080fd5b8035613f00613efb82613e7e565b613e4e565b818152866020838501011115613f1557600080fd5b816020840160208301376000602083830101528093505050509250929050565b60008060208385031215613f4857600080fd5b82356001600160401b0380821115613f5f57600080fd5b818501915085601f830112613f7357600080fd5b813581811115613f8257600080fd5b86602060e083028501011115613f9757600080fd5b60209290920196919550909350505050565b6020808252825182820181905260009190848201906040850190845b81811015613feb57613fd8838551613cc6565b9284019260e09290920191600101613fc5565b50909695505050505050565b60208082526012908201527114dd1c985d1959de481b9bdd08199bdd5b9960721b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6020808252601490820152735265737472696374656420746f2061646d696e7360601b604082015260600190565b60006020828403121561407957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156107be576107be614080565b808201808211156107be576107be614080565b6000600182016140ce576140ce614080565b5060010190565b634e487b7160e01b600052603160045260246000fd5b600060ff821660ff810361410157614101614080565b60010192915050565b6020808252601b908201527f43616c6c6572206973206e6f74207468652045584348414e4745520000000000604082015260600190565b60208082526019908201527810d85cda081cdd1c985d1959de481b9bdd081cd95d081e595d603a1b604082015260600190565b6001600160a01b039485168152602081019390935292166040820152901515606082015260800190565b7f496e20706f7274666f6c696f4d616e61676572206e6f7420656e6f7567682066815274037b9103a3930b739b332b9102fb0b6b7bab73a1d1605d1b6020820152600083516141f4816035850160208801613d67565b620101e160ed1b6035918401918201528351614217816038840160208801613d67565b01603801949350505050565b6020815260006136e26020830184613d8b565b6001600160a01b03929092168252602082015260400190565b801515811461123257600080fd5b60006020828403121561426f57600080fd5b81516136e28161424f565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60208082526018908201527716995c9bc81859191c995cdcc81b9bdd08185b1b1bddd95960421b604082015260600190565b60006020828403121561435657600080fd5b81516001600160401b0381111561436c57600080fd5b8201601f8101841361437d57600080fd5b805161438b613efb82613e7e565b8181528560208385010111156143a057600080fd5b6143b1826020830160208601613d67565b95945050505050565b9182526001600160a01b0316602082015260400190565b6020808252601d908201527f5265737472696374656420746f20506f7274666f6c696f204167656e74000000604082015260600190565b600060e0828403121561441a57600080fd5b60405160e081018181106001600160401b038211171561443c5761443c613e38565b60405261444883613c8f565b81526020830135602082015260408301356040820152606083013560608201526080830135608082015260a08301356144808161424f565b60a082015260c08301356144938161424f565b60c08201529392505050565b6000826144bc57634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176107be576107be614080565b9788526001600160a01b0396909616602088015260408701949094526060860192909252608085015260a0840152151560c0830152151560e08201526101000190565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b81526000835161454d816017850160208801613d67565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161457e816028840160208801613d67565b01602801949350505050565b60008161459957614599614080565b506000190190565b600082516145b3818460208701613d67565b919091019291505056fe3eb675f159e6ca6cf5de6bfbbc8c4521cfd428f5e9166e51094d5898504caf2dd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde9137360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212203bffb4c8fa2fb4336d68379f4a79f1b75b8735835be4cad03d7afe02ec5f4daa64736f6c63430008110033",
  "implementation": "0xD55B35EaDe756b10D1c3BAf9824902f0262f1565",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "withdraw(uint256)": {
        "details": "Withdraw target amount assets from strategies Send amount to Exchanger",
        "returns": {
          "_0": "- how much PortfolioManager unstake from strategies",
          "_1": "- executed or not balance function on PortfolioManager"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 953,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 956,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1863,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2247,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 174,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)169_storage)"
      },
      {
        "astId": 481,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 935,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1251,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 30724,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "exchanger",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 30727,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "asset",
        "offset": 0,
        "slot": "252",
        "type": "t_contract(IERC20)4986"
      },
      {
        "astId": 30731,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "strategyWeightPositions",
        "offset": 0,
        "slot": "253",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 30735,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "strategyWeights",
        "offset": 0,
        "slot": "254",
        "type": "t_array(t_struct(StrategyWeight)41282_storage)dyn_storage"
      },
      {
        "astId": 30738,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "cashStrategy",
        "offset": 0,
        "slot": "255",
        "type": "t_contract(IStrategy)41686"
      },
      {
        "astId": 30741,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "m2m",
        "offset": 0,
        "slot": "256",
        "type": "t_contract(IMark2Market)41230"
      },
      {
        "astId": 30743,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "totalRiskFactor",
        "offset": 0,
        "slot": "257",
        "type": "t_uint256"
      },
      {
        "astId": 30745,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "navSlippageBp",
        "offset": 0,
        "slot": "258",
        "type": "t_uint256"
      },
      {
        "astId": 30748,
        "contract": "contracts/PortfolioManager.sol:PortfolioManager",
        "label": "roleManager",
        "offset": 0,
        "slot": "259",
        "type": "t_contract(IRoleManager)41518"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(StrategyWeight)41282_storage)dyn_storage": {
        "base": "t_struct(StrategyWeight)41282_storage",
        "encoding": "dynamic_array",
        "label": "struct IPortfolioManager.StrategyWeight[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)4986": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IMark2Market)41230": {
        "encoding": "inplace",
        "label": "contract IMark2Market",
        "numberOfBytes": "20"
      },
      "t_contract(IRoleManager)41518": {
        "encoding": "inplace",
        "label": "contract IRoleManager",
        "numberOfBytes": "20"
      },
      "t_contract(IStrategy)41686": {
        "encoding": "inplace",
        "label": "contract IStrategy",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)169_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)169_storage"
      },
      "t_struct(RoleData)169_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 166,
            "contract": "contracts/PortfolioManager.sol:PortfolioManager",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 168,
            "contract": "contracts/PortfolioManager.sol:PortfolioManager",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(StrategyWeight)41282_storage": {
        "encoding": "inplace",
        "label": "struct IPortfolioManager.StrategyWeight",
        "members": [
          {
            "astId": 41269,
            "contract": "contracts/PortfolioManager.sol:PortfolioManager",
            "label": "strategy",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 41271,
            "contract": "contracts/PortfolioManager.sol:PortfolioManager",
            "label": "minWeight",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 41273,
            "contract": "contracts/PortfolioManager.sol:PortfolioManager",
            "label": "targetWeight",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 41275,
            "contract": "contracts/PortfolioManager.sol:PortfolioManager",
            "label": "maxWeight",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 41277,
            "contract": "contracts/PortfolioManager.sol:PortfolioManager",
            "label": "riskFactor",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 41279,
            "contract": "contracts/PortfolioManager.sol:PortfolioManager",
            "label": "enabled",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 41281,
            "contract": "contracts/PortfolioManager.sol:PortfolioManager",
            "label": "enabledReward",
            "offset": 1,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}